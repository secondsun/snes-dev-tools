package net.sagaoftherealms.tools.snes.assembler.definition.directives;

public class AllDirective extends Directive {

    //x = a whole number
    //f = a number with a decimal part
    //c = a character
    //s = a String value (expands to "some text"
    //L = a label (which will be a string)

    //T = a boolean expression
    //E = a integer expression

    //() = on of enclosed types
    //()[] = A comma separated List of types in the parenthesis (see .DB in https://wla-dx.readthedocs.io/en/latest/asmdiv.html)
    public static final AllDirective[] ALL_DIRECTIVES = {
            new AllDirective(".8BIT"),
            new AllDirective(".16BIT"),
            new AllDirective(".24BIT"),
            new AllDirective(".ACCU x"),
            new AllDirective(".INDEX x"),
            new AllDirective(".ASM"),
            new AllDirective(".ENDASM"),
            new AllDirective(".DBRND x, x, x"),
            new AllDirective(".DWRND x, x, x"),
            new AllDirective(".DBCOS f, x, f, f, f"),
            new AllDirective(".DBSIN f, x, f, f, f"),
            new AllDirective(".DWCOS f, x, f, f, f"),
            new AllDirective(".DWSIN f, x, f, f, f"),
            new AllDirective(".ROMBANKS x"),
            new AllDirective(".EMPTYFILL x"),
            new AllDirective(".COMPUTESNESCHECKSUM"),
            new AllDirective(".INCDIR s"),
            new AllDirective(".INCLUDE s"),
            new AllDirective(".INCBIN s"),
            new AllDirective(".INPUT NAME"),
            new AllDirective(".BACKGROUND s"),
            new AllDirective(".UNBACKGROUND x x"),
            new AllDirective(".FAIL"),
            new AllDirective(".FCLOSE L"),
            new AllDirective(".FOPEN s L"),
            new AllDirective(".FREAD L L"),
            new AllDirective(".FSIZE L L"),
            new AllDirective(".MACRO L"),
            new AllDirective(".ENDM"),
            new AllDirective(".SHIFT"),
            new AllDirective(".FASTROM"),
            new AllDirective(".SLOWROM"),
            new AllDirective(".SMC"),
            new AllDirective(".HIROM"),
            new AllDirective(".EXHIROM"),
            new AllDirective(".LOROM"),
            new AllDirective(".BASE x"),
            new AllDirective(".BLOCK s"),
            new AllDirective(".ENDB"),
            new AllDirective(".BANK x SLOT x"),
            new AllDirective(".SLOT x"),
            new AllDirective(".ROMBANKSIZE x"),
            new AllDirective(".ORG c"),
            new AllDirective(".ORGA c"),
            new AllDirective(".DS x, x"),
            new AllDirective(".DSB x, x"),
            new AllDirective(".DSTRUCT L INSTANCEOF L DATA (xsf)[]"),
            new AllDirective(".DSTRUCT L INSTANCEOF L (xsf)[]"),
            new AllDirective(".DSTRUCT L L DATA (xsf)[]"),
            new AllDirective(".DSTRUCT L L (xsf)[]"),
            new AllDirective(".DSW x, x"),
            new AllDirective(".DB (xsf)[]"),
            new AllDirective(".BYT (xsf)[]"),
            new AllDirective(".DBM L (xsf)[]"),
            new AllDirective(".SYM L"),
            new AllDirective(".SYMBOL L"),
            new AllDirective(".BR"),
            new AllDirective(".BREAKPOINT"),
            new AllDirective(".ASCIITABLE"),
            new AllDirective(".ENDA"),
            new AllDirective(".ASCTABLE"),
            new AllDirective(".ASC s"),
            new AllDirective(".DW (xc)[]"),
            new AllDirective(".WORD .DW "),
            new AllDirective(".DWM l (x)[]"),
            new AllDirective(".DEFINE L (xs)[]"),
            new AllDirective(".DEF L (xs)[]"),
            new AllDirective(".EQU L (xs)[]"),
            new AllDirective(".REDEFINE L (xsL)[]"),
            new AllDirective(".REDEF L (xsL)[]"),
            new AllDirective(".IF T"),
            new AllDirective(".IFDEF L"),
            new AllDirective(".IFEXISTS s"),
            new AllDirective(".UNDEFINE L"),
            new AllDirective(".UNDEF L"),
            new AllDirective(".IFNDEF L"),
            new AllDirective(".IFDEFM \\x"),
            new AllDirective(".IFNDEFM \\x"),
            new AllDirective(".IFEQ (ELx) (ELx)"),

            new AllDirective(".IFNEQ (ELx) (ELx)"),
            new AllDirective(".IFLE (ELx) (ELx)"),
            new AllDirective(".IFLEEQ (ELx) (ELx)"),
            new AllDirective(".IFGR (ELx) (ELx)"),
            new AllDirective(".IFGREQ (ELx) (ELx)"),
            new AllDirective(".ELSE"),
            new AllDirective(".ENDIF"),
            new AllDirective(".REPEAT x"),
            new AllDirective(".REPT x"),
            new AllDirective(".REPEAT x INDEX L"),
            new AllDirective(".REPT x INDEX L"),
            new AllDirective(".ENDR"),
            new AllDirective(".ENUM x"),
            new AllDirective(".ENUM x ASC"),
            new AllDirective(".ENUM x DESC"),
            new AllDirective(".ENUM x ASC EXPORT"),
            new AllDirective(".ENUM x DESC EXPORT"),
            new AllDirective(".ENDE"),
            new AllDirective(".STRUCT L"),
            new AllDirective(".ENDST"),
            new AllDirective(".MEMORYMAP"),
            new AllDirective(".ENDME"),
            new AllDirective(".ROMBANKMAP"),
            new AllDirective(".ENDRO"),
            new AllDirective(".SEED x"),
            //TODO Fix sections so they are more useful than as input for a test
            new AllDirective(".SECTION L"),
            new AllDirective(".SECTION L FORCE"),
            new AllDirective(".SECTION L FREE"),
            new AllDirective(".SECTION L SEMIFREE"),
            new AllDirective(".SECTION L SIZE x"),
            new AllDirective(".SECTION L SIZE x ALIGN x FORCE"),
            new AllDirective(".SECTION L FREE RETURNORG"),
            new AllDirective(".SECTION L SIZE x ALIGN x SEMIFREE RETURNORG"),
            new AllDirective(".SECTION L SUPERFREE APPENDTO L"),
            new AllDirective(".SECTION L SEMISUBFREE RETURNORG APPENDTO L"),
            new AllDirective(".SECTION L OVERWRITE"),
            //TODO Fix ramsections so they are more useful than as input for a test
            new AllDirective(".RAMSECTION L BANK x SLOT x ALIGN x"),
            new AllDirective(".RAMSECTION L BANK x SLOT x"),
            new AllDirective(".RAMSECTION L SLOT x"),
            new AllDirective(".RAMSECTION L APPENDTO"),
            new AllDirective(".ENDS"),
            new AllDirective(".EXPORT (L)[]"),
            new AllDirective(".PRINTT s"),
            new AllDirective(".PRINTV DEC E"),
            new AllDirective(".PRINTV HEX E"),
            new AllDirective(".OUTNAME s"),
            new AllDirective(".SNESHEADER"),
            new AllDirective(".ENDSNES"),
            new AllDirective(".SNESNATIVEVECTOR"),
            new AllDirective(".ENDNATIVEVECTOR"),
            new AllDirective(".SNESEMUVECTOR"),
            new AllDirective(".ENDEMUVECTOR"),
    };
    private final String string;

    private AllDirective(String s) {
        this.string = s;
    }
}
